package com.gmail.kennethbgoodin.metrics;

import com.gmail.kennethbgoodin.metrics.spring.repository.MemoryMetricRepository;
import org.apache.logging.log4j.util.TriConsumer;

import java.util.Comparator;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;

/**
 * Tracks metrics for web server requests/responses and supplies various reductions of stored data including the maximum, minimum and average.
 *
 * Stores data using the supplied {@link MetricRepository}.
 *
 * Metrics are keyed via {@link MetricKey} instances. Some defaults are supplied in {@link MetricKeys}. Additionally
 * requests are keyed by the supplied key function.
 *
 * @param <REQ> The request class
 * @param <RESP> The response class
 */
public class Metrics<REQ, RESP> {

    private final Function<REQ, String> keyFunction;
    private final TriConsumer<RESP, String, String> addHeaderFunction;
    private final MetricRepository repository;

    private Metrics(Function<REQ, String> keyFunction,
                    TriConsumer<RESP, String, String> addHeaderFunction,
                    MetricRepository repository) {
        Objects.requireNonNull(keyFunction);
        Objects.requireNonNull(addHeaderFunction);
        Objects.requireNonNull(repository);

        this.keyFunction = keyFunction;
        this.addHeaderFunction = addHeaderFunction;
        this.repository = repository;
    }

    /**
     * Inserts a value for the given metric and request id. In most cases the function you want to use
     * is {@link Metrics#insert(MetricKey, Object, long)}
     *
     * @param key The key identifying the metric used
     * @param reqId The request id.
     * @param value The value for the metric
     */
    public void insertWithId(MetricKey key, String reqId, long value) {
        repository.insert(key, reqId, value);
    }

    /**
     * Inserts a value for the given metric and request
     * @param metricKey The key identifying the metric used
     * @param req The request, used to generate a unique id with the supplied request id function
     * @param value The value for the metric
     */
    public void insert(MetricKey metricKey, REQ req, long value) {
        insertWithId(metricKey, getRequestId(req), value);
    }

    /**
     * Creates a Map of all of the data for the given metric
     * @param metricKey The key for the metric you want the data for
     * @return A Map of request id to long of the data
     */
    public Map<String, Long> getAll(MetricKey metricKey) {
        return repository.getAll(metricKey);
    }

    /**
     * Adds a header to the response using the supplied header response function
     * @param resp The response
     * @param header The header
     * @param body The header body
     */
    public void addResponseHeader(RESP resp, String header, String body) {
        addHeaderFunction.accept(resp, header, body);
    }

    /**
     * Returns the request id for the given request
     * @param req The request
     * @return The request id generated by the supplied key function
     */
    public String getRequestId(REQ req) {
        return keyFunction.apply(req);
    }

    /**
     * Averages the metric data for the supplied key
     * @param key The metric key
     * @return The average of the data
     */
    public double average(MetricKey key) {
        Map<String, Long> data = getAll(key);
        return average(data);
    }

    /**
     * Calculates the max of the metric data for the supplied key
     * @param key The key
     * @return An Optional describing the request id and max value, or empty if none is found.
     */
    public Optional<Map.Entry<String, Long>> max(MetricKey key) {
        Map<String, Long> data = getAll(key);
        return max(data);
    }

    /**
     * Calculates the min of the metric data for the supplied key
     * @param key The key
     * @return An Optional describing the request id and min value, or empty if none is found.
     */
    public Optional<Map.Entry<String, Long>> min(MetricKey key) {
        Map<String, Long> data = getAll(key);
        return min(data);
    }

    //

    public static <REQ, RESP> MetricBuilder<REQ, RESP> builder() {
        return new MetricBuilder<>();
    }

    public static double average(Map<String, Long> data) {
        double size = (double) data.size();
        double sum = (double) data.values()
                .stream()
                .mapToLong(Long::longValue)
                .sum();
        return sum / size;
    }

    public static Optional<Map.Entry<String, Long>> max(Map<String, Long> data) {
        return data.entrySet()
                .stream()
                .max(Comparator.comparing(Map.Entry::getValue));
    }

    public static Optional<Map.Entry<String, Long>> min(Map<String, Long> data) {
        return data.entrySet()
                .stream()
                .min(Comparator.comparing(Map.Entry::getValue));
    }

    /**
     * @return an in-memory repository for storing metrics
     */
    public static MetricRepository inMemoryRepository() {
        return new MemoryMetricRepository();
    }

    /**
     * Builder for creating a Metrics instance.
     *
     * @param <REQ> The request class
     * @param <RESP> The response class
     */
    public static class MetricBuilder<REQ, RESP> {

        private Function<REQ, String> requestIdFunction;
        private TriConsumer<RESP, String, String> responseHeaderFunction;
        private MetricRepository repository;

        /**
         * Sets the function used for generating unique ids per request
         * @param requestIdFunction The function to generate unique ids
         * @return This builder
         */
        public MetricBuilder<REQ, RESP> idRequestsWith(Function<REQ, String> requestIdFunction) {
            Objects.requireNonNull(requestIdFunction);
            this.requestIdFunction = requestIdFunction;
            return this;
        }

        /**
         * Sets the function for adding a header to a response to a request. Used for marking responses tracked by this instance
         * @param responseHeaderFunction The function to add a header
         * @return This builder
         */
        public MetricBuilder<REQ, RESP> addHeaderToResponseWith(TriConsumer<RESP, String, String> responseHeaderFunction) {
            Objects.requireNonNull(responseHeaderFunction);
            this.responseHeaderFunction = responseHeaderFunction;
            return this;
        }

        /**
         * Sets the {@link MetricRepository} used to store metric data.
         * @param repository The repository
         * @return This builder
         */
        public MetricBuilder<REQ, RESP> withRepository(MetricRepository repository) {
            Objects.requireNonNull(repository);
            this.repository = repository;
            return this;
        }

        /**
         * @return A metrics instance built from the supplied parameters.
         */
        public Metrics<REQ, RESP> build() {
            return new Metrics<>(requestIdFunction, responseHeaderFunction, repository);
        }
    }
}